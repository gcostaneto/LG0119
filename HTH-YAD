# scripts genericos
# ajuste generico (necessita adaptacao para dataframe)

y.adjuste = function(Gid,Env,value,stand= NULL,df){
  # organizing dataframe
  if(is.null(stand)){
    data = df[,c(Gid,Env,value)]
    names(data)= c("Gid","Env","value")
    form = as.formula("value~(1|Gid)+(1|Env:Gid)+Env")
  }else{
    data = df[,c(Gid,Env,value,stand)]
    names(data)= c("Gid","Env","value","stand")
    form = as.formula("value~stand+(1|Gid)+(1|Env:Gid)+Env")
  }
  
  # fitting linear mixed model
  m.prod<-lmer(form,data)
  
  # obtaining environmental BLUEs
  En = data.frame(emmeans(m.prod, "Env"))[,c(1:2)]
  names(En)[1:2] = c("e","e.mean")
  
  # obtaining genotypic and GxE BLUPs
  ge<-data.frame(ranef(m.prod)[1])                # interacao genotipo x local
  
  g<-data.frame(ranef(m.prod)[2])
  g$g<-row.names(g)
  names(g)[1]<-"g.hat"
  
  GE<-data.frame(colsplit(row.names(ge), ":",c("e","g")),ge.hat=ge$X.Intercept.)
  names(GE)
  
  E = c()
  for(i in 1:nrow(g)){E = rbind(E,cbind(En,g[i,]))}
  Y = merge(x = E, y = GE, by=c("g","e"),all.x= TRUE)
  Y$ge.hat[is.na(Y$ge.hat)] = 0
  
  # final eBLUP
  Y$value = Y$e.mean + Y$g.hat + Y$ge.hat
  names(Y)[c(1:2)] = c(Gid,Env)
  return(Y)
}

head.df = function(LG,gid){
  
  lgid = levels(gid)
  df = NULL
  
  for(j in 1:length(LG)){
    a = lgid[!lgid %in% LG[j]]
    df=rbind(df,data.frame(LG=LG[j],C=a))
  }
  return(df)
}


# necessita adaptacao para dataframe
head.to.head = function(by=20,
                        df.H,
                        df.Y,
                        LG, 
                        C, 
                        path = getwd(),
                        site = "Cidade",
                        env="env.mean",
                        gid="gid",
                        y = "value",
                      Regiao, full=T, smoot=F){
  #'---------------------------------------------------------------#
  df.t = df.H[,c(LG,C)]
  df.y = df.Y[,c(env,site,gid,y)]
  names(df.y) = c("env","Cidade","gid","value")
  #'---------------------------------------------------------------#
  
  for(K in 1:nrow(df.t)){
    
    Regiao = as.character(df.t$Regiao[K])
    LG     = as.character(df.t$LG[K])
    C      = as.character(df.t$C[K])
    nome   = paste(Regiao,LG,"x",C,sep=" ")
    
    cat(paste("Figura ",nome,"\n",sep=""));
    
    (J = df.y[df.y$gid%in%c(LG,C),]);
    
    lim = round(seq(min(J$value),max(J$value),by=20),0)
    end = lim[length(lim)];
    
    p1=ggplot(J, aes(x=env,y=value,colour=gid))+
      geom_point()+
      stat_smooth(data=J, aes(x=env,y=value,fill=gid,colour=gid),
                  se=smoot,method="lm",fullrange = full,size=1)+
      xlab("Média Ambiental")+ylab("Média do Híbrido")+
      scale_fill_manual(values=c("royalblue","red3"))+ 
      theme_minimal()+ 
      geom_text(aes(x = env, y = value, label = Cidade), vjust = 2, 
                size = 2.5)+
      scale_x_continuous(limits = c(lim[1],lim[length(lim)]),
                         breaks=lim)+
      scale_y_continuous(limits = c(lim[1],lim[length(lim)]),
                         breaks=lim)+
      theme(axis.line = element_line(colour = "black", 
                                     size = 1, linetype = "solid"),
            legend.position = c(.15,.90))+
      scale_colour_manual(values=c("royalblue","red3"))+graphs
    #'---------------------------------------------------------------#
    a = droplevels(df.y[df.y$gid%in%c(LG,C),])
    
    a = acast(a,Cidade~gid,value.var = "value")
    x = colnames(a)
    a = data.frame(a[complete.cases(a),])
    colnames(a) = x
    a=melt(table(colnames(a)[apply(a, 1, which.max)]))
    
    p2=ggplot(data=a,aes(x=Var1,y=value,fill=Var1))+
      xlab("")+ylab("Número de vitórias")+
      geom_bar(position = "stack",stat = "identity",colour="black",
               width = .96)+
      theme_minimal()+
      theme(legend.position = "none",
            axis.line = element_line(colour = "black", 
                                     size = 1, linetype = "solid"))+
      scale_fill_manual(values=c("royalblue","red3"))+
      scale_colour_manual(values=c("royalblue","red3"))+graphs
    #'---------------------------------------------------------------#
    p3=ggarrange(p1,p2,ncol=2,widths = c(1.8,.8),common.legend = F)
    b=annotate_figure(p3,
                      top = text_grob(nome, 
                                      color = "red3", face = "bold", size = 19))
    
    
    ggsave(filename= paste(nome,".png",sep=""), path = path,plot = b,width = 11.6,height = 5.6)
    
  }
}


FW.out = function(y, gid, env, method = "OLS",scale=TRUE, to = c(0.5,2)){
  fit = FW(y=y,VAR = gid,ENV = env,method = method)
  out = data.frame(g = fit$mu+fit$g, b = fit$b)
  if(scale == TRUE){out$b = rescale(out$b,to=to)}
  names(out) = c("g","b")
  return(list(acc=cor(fit$y,fit$yhat),adp=out))
}

pheno.rep = function(Gid,Env,value,df){
  pheno<-c()
  
  data = df[,c(Gid,Env,value)]
  names(data)= c("Gid","Env","value")
  for(i in 1:nlevels(data$Gid)){
    
    data2<-droplevels(data[-which(data$Gid == levels(data$Gid)[i]),])
    
    for(j in 1:nlevels(data2$Env)){
      data3<-droplevels(data2[-which(data2$Env == levels(data2$Env)[j]),])
      
      Y= y.adjuste(Gid = "Gid", Env = "Env",value = "value",df = data3)
      pheno<-rbind(pheno,Y)
    }
  } 
  return(pheno)
}
